#!/usr/bin/env python

#
# Generated Mon May 10 11:18:09 2010 by generateDS.py version 1.20e.
#

import sys
from string import lower as str_lower
from xml.dom import minidom
from xml.dom import Node

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def format_string(self, input_data, input_name=''):
            return input_data
        def format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def format_boolean(self, input_data, input_name=''):
            return '%s' % input_data


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class datamodel(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, datatypes=None, relations=None):
        if datatypes is None:
            self.datatypes = []
        else:
            self.datatypes = datatypes
        if relations is None:
            self.relations = []
        else:
            self.relations = relations
    def factory(*args_, **kwargs_):
        if datamodel.subclass:
            return datamodel.subclass(*args_, **kwargs_)
        else:
            return datamodel(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getDatatypes(self): return self.datatypes
    def setDatatypes(self, datatypes): self.datatypes = datatypes
    def addDatatypes(self, value): self.datatypes.append(value)
    def insertDatatypes(self, index, value): self.datatypes[index] = value
    datatypesProp = property(getDatatypes, setDatatypes)
    def getRelations(self): return self.relations
    def setRelations(self, relations): self.relations = relations
    def addRelations(self, value): self.relations.append(value)
    def insertRelations(self, index, value): self.relations[index] = value
    relationsProp = property(getRelations, setRelations)
    def export(self, outfile, level, namespace_='', name_='datamodel', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='datamodel')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='datamodel'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='datamodel'):
        for datatypes_ in self.datatypes:
            datatypes_.export(outfile, level, namespace_, name_='datatypes')
        for relations_ in self.relations:
            relations_.export(outfile, level, namespace_, name_='relations')
    def hasContent_(self):
        if (
            self.datatypes or
            self.relations
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='datamodel'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('datatypes=[\n')
        level += 1
        for datatypes_ in self.datatypes:
            showIndent(outfile, level)
            outfile.write('model_.datatype(\n')
            datatypes_.exportLiteral(outfile, level, name_='datatype')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('relations=[\n')
        level += 1
        for relations_ in self.relations:
            showIndent(outfile, level)
            outfile.write('model_.relation(\n')
            relations_.exportLiteral(outfile, level, name_='relation')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'datatypes':
            obj_ = datatype.factory()
            obj_.build(child_)
            self.datatypes.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'relations':
            obj_ = relation.factory()
            obj_.build(child_)
            self.relations.append(obj_)
# end class datamodel


class datatype(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, iconName=None, properties=None):
        self.name = name
        self.iconName = iconName
        if properties is None:
            self.properties = []
        else:
            self.properties = properties
    def factory(*args_, **kwargs_):
        if datatype.subclass:
            return datatype.subclass(*args_, **kwargs_)
        else:
            return datatype(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getName(self): return self.name
    def setName(self, name): self.name = name
    nameProp = property(getName, setName)
    def getIconname(self): return self.iconName
    def setIconname(self, iconName): self.iconName = iconName
    iconNameProp = property(getIconname, setIconname)
    def getProperties(self): return self.properties
    def setProperties(self, properties): self.properties = properties
    def addProperties(self, value): self.properties.append(value)
    def insertProperties(self, index, value): self.properties[index] = value
    propertiesProp = property(getProperties, setProperties)
    def export(self, outfile, level, namespace_='', name_='datatype', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='datatype')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='datatype'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='datatype'):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('<%sname>%s</%sname>\n' % (namespace_, self.format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_))
        if self.iconName is not None:
            showIndent(outfile, level)
            outfile.write('<%siconName>%s</%siconName>\n' % (namespace_, self.format_string(quote_xml(self.iconName).encode(ExternalEncoding), input_name='iconName'), namespace_))
        for properties_ in self.properties:
            properties_.export(outfile, level, namespace_, name_='properties')
    def hasContent_(self):
        if (
            self.name is not None or
            self.iconName is not None or
            self.properties
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='datatype'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.iconName is not None:
            showIndent(outfile, level)
            outfile.write('iconName=%s,\n' % quote_python(self.iconName).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('properties=[\n')
        level += 1
        for properties_ in self.properties:
            showIndent(outfile, level)
            outfile.write('model_.property(\n')
            properties_.exportLiteral(outfile, level, name_='property')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'name':
            name_ = ''
            for text__content_ in child_.childNodes:
                name_ += text__content_.nodeValue
            self.name = name_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'iconName':
            iconName_ = ''
            for text__content_ in child_.childNodes:
                iconName_ += text__content_.nodeValue
            self.iconName = iconName_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'properties':
            obj_ = property.factory()
            obj_.build(child_)
            self.properties.append(obj_)
# end class datatype


class property(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, valueType=None, mandatory=None, defaultValue=None):
        self.name = name
        self.valueType = valueType
        self.mandatory = mandatory
        self.defaultValue = defaultValue
    def factory(*args_, **kwargs_):
        if property.subclass:
            return property.subclass(*args_, **kwargs_)
        else:
            return property(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getName(self): return self.name
    def setName(self, name): self.name = name
    nameProp = property(getName, setName)
    def getValuetype(self): return self.valueType
    def setValuetype(self, valueType): self.valueType = valueType
    valueTypeProp = property(getValuetype, setValuetype)
    def getMandatory(self): return self.mandatory
    def setMandatory(self, mandatory): self.mandatory = mandatory
    mandatoryProp = property(getMandatory, setMandatory)
    def getDefaultvalue(self): return self.defaultValue
    def setDefaultvalue(self, defaultValue): self.defaultValue = defaultValue
    defaultValueProp = property(getDefaultvalue, setDefaultvalue)
    def export(self, outfile, level, namespace_='', name_='property', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='property')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='property'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='property'):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('<%sname>%s</%sname>\n' % (namespace_, self.format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_))
        if self.valueType is not None:
            showIndent(outfile, level)
            outfile.write('<%svalueType>%s</%svalueType>\n' % (namespace_, self.format_string(quote_xml(self.valueType).encode(ExternalEncoding), input_name='valueType'), namespace_))
        if self.mandatory is not None:
            showIndent(outfile, level)
            outfile.write('<%smandatory>%s</%smandatory>\n' % (namespace_, self.format_boolean(str_lower(str(self.mandatory)), input_name='mandatory'), namespace_))
        if self.defaultValue is not None:
            showIndent(outfile, level)
            outfile.write('<%sdefaultValue>%s</%sdefaultValue>\n' % (namespace_, self.format_string(quote_xml(self.defaultValue).encode(ExternalEncoding), input_name='defaultValue'), namespace_))
    def hasContent_(self):
        if (
            self.name is not None or
            self.valueType is not None or
            self.mandatory is not None or
            self.defaultValue is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='property'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.valueType is not None:
            showIndent(outfile, level)
            outfile.write('valueType=%s,\n' % quote_python(self.valueType).encode(ExternalEncoding))
        if self.mandatory is not None:
            showIndent(outfile, level)
            outfile.write('mandatory=%s,\n' % self.mandatory)
        if self.defaultValue is not None:
            showIndent(outfile, level)
            outfile.write('defaultValue=%s,\n' % quote_python(self.defaultValue).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'name':
            name_ = ''
            for text__content_ in child_.childNodes:
                name_ += text__content_.nodeValue
            self.name = name_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'valueType':
            valueType_ = ''
            for text__content_ in child_.childNodes:
                valueType_ += text__content_.nodeValue
            self.valueType = valueType_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'mandatory':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                if sval_ in ('true', '1'):
                    ival_ = True
                elif sval_ in ('false', '0'):
                    ival_ = False
                else:
                    raise ValueError('requires boolean -- %s' % child_.toxml())
                self.mandatory = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'defaultValue':
            defaultValue_ = ''
            for text__content_ in child_.childNodes:
                defaultValue_ += text__content_.nodeValue
            self.defaultValue = defaultValue_
# end class property


class relation(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, iconName=None, sourceDataTypeNames=None, targetDataTypeNames=None):
        self.name = name
        self.iconName = iconName
        if sourceDataTypeNames is None:
            self.sourceDataTypeNames = []
        else:
            self.sourceDataTypeNames = sourceDataTypeNames
        if targetDataTypeNames is None:
            self.targetDataTypeNames = []
        else:
            self.targetDataTypeNames = targetDataTypeNames
    def factory(*args_, **kwargs_):
        if relation.subclass:
            return relation.subclass(*args_, **kwargs_)
        else:
            return relation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getName(self): return self.name
    def setName(self, name): self.name = name
    nameProp = property(getName, setName)
    def getIconname(self): return self.iconName
    def setIconname(self, iconName): self.iconName = iconName
    iconNameProp = property(getIconname, setIconname)
    def getSourcedatatypenames(self): return self.sourceDataTypeNames
    def setSourcedatatypenames(self, sourceDataTypeNames): self.sourceDataTypeNames = sourceDataTypeNames
    def addSourcedatatypenames(self, value): self.sourceDataTypeNames.append(value)
    def insertSourcedatatypenames(self, index, value): self.sourceDataTypeNames[index] = value
    sourceDataTypeNamesProp = property(getSourcedatatypenames, setSourcedatatypenames)
    def getTargetdatatypenames(self): return self.targetDataTypeNames
    def setTargetdatatypenames(self, targetDataTypeNames): self.targetDataTypeNames = targetDataTypeNames
    def addTargetdatatypenames(self, value): self.targetDataTypeNames.append(value)
    def insertTargetdatatypenames(self, index, value): self.targetDataTypeNames[index] = value
    targetDataTypeNamesProp = property(getTargetdatatypenames, setTargetdatatypenames)
    def export(self, outfile, level, namespace_='', name_='relation', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='relation')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='relation'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='relation'):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('<%sname>%s</%sname>\n' % (namespace_, self.format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_))
        if self.iconName is not None:
            showIndent(outfile, level)
            outfile.write('<%siconName>%s</%siconName>\n' % (namespace_, self.format_string(quote_xml(self.iconName).encode(ExternalEncoding), input_name='iconName'), namespace_))
        for sourceDataTypeNames_ in self.sourceDataTypeNames:
            showIndent(outfile, level)
            outfile.write('<%ssourceDataTypeNames>%s</%ssourceDataTypeNames>\n' % (namespace_, self.format_string(quote_xml(sourceDataTypeNames_).encode(ExternalEncoding), input_name='sourceDataTypeNames'), namespace_))
        for targetDataTypeNames_ in self.targetDataTypeNames:
            showIndent(outfile, level)
            outfile.write('<%stargetDataTypeNames>%s</%stargetDataTypeNames>\n' % (namespace_, self.format_string(quote_xml(targetDataTypeNames_).encode(ExternalEncoding), input_name='targetDataTypeNames'), namespace_))
    def hasContent_(self):
        if (
            self.name is not None or
            self.iconName is not None or
            self.sourceDataTypeNames or
            self.targetDataTypeNames
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='relation'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.iconName is not None:
            showIndent(outfile, level)
            outfile.write('iconName=%s,\n' % quote_python(self.iconName).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('sourceDataTypeNames=[\n')
        level += 1
        for sourceDataTypeNames_ in self.sourceDataTypeNames:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(sourceDataTypeNames_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('targetDataTypeNames=[\n')
        level += 1
        for targetDataTypeNames_ in self.targetDataTypeNames:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(targetDataTypeNames_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'name':
            name_ = ''
            for text__content_ in child_.childNodes:
                name_ += text__content_.nodeValue
            self.name = name_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'iconName':
            iconName_ = ''
            for text__content_ in child_.childNodes:
                iconName_ += text__content_.nodeValue
            self.iconName = iconName_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'sourceDataTypeNames':
            sourceDataTypeNames_ = ''
            for text__content_ in child_.childNodes:
                sourceDataTypeNames_ += text__content_.nodeValue
            self.sourceDataTypeNames.append(sourceDataTypeNames_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'targetDataTypeNames':
            targetDataTypeNames_ = ''
            for text__content_ in child_.childNodes:
                targetDataTypeNames_ += text__content_.nodeValue
            self.targetDataTypeNames.append(targetDataTypeNames_)
# end class relation


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def parse(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = datamodel.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="datamodel", 
        namespacedef_='')
    return rootObj


def parseString(inString):
    doc = minidom.parseString(inString)
    rootNode = doc.documentElement
    rootObj = datamodel.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="datamodel",
        namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = datamodel.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from datamodel import *\n\n')
    sys.stdout.write('import datamodel as model_\n\n')
    sys.stdout.write('rootObj = model_.datamodel(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_="datamodel")
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

